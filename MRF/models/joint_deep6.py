import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils import data
from ..BaseModel import * 


class model(BaseModel):
	def __init__(self, nb_params=None, projection=None, ghost=False):
		super(model, self).__init__(False, True, nb_params=nb_params, projection=projection, ghost=ghost)
		if not self.ghost:
			self.fc1 = nn.Linear(666, self.projection.dimension_projection)
			
			self.t1fc20 = nn.Linear(self.projection.dimension_projection, 128)
			self.t1bn20 = nn.BatchNorm1d(128)
			self.t1fc2 = nn.Linear(128, 256)
			self.t1bn2 = nn.BatchNorm1d(256)
			self.t1fc3 = nn.Linear(256, 512)
			self.t1bn3 = nn.BatchNorm1d(512)
			self.t1fc4 = nn.Linear(512, 1024)
			self.t1bn4 = nn.BatchNorm1d(1024)
			self.t1fc5 = nn.Linear(1024, 768)
			self.t1bn5 = nn.BatchNorm1d(768)
			self.t1fc6 = nn.Linear(768, 640)
			self.t1bn6 = nn.BatchNorm1d(640)
			self.t1fc7 = nn.Linear(640, 512)
			self.t1bn7 = nn.BatchNorm1d(512)
			self.t1fc8 = nn.Linear(512, 384)
			self.t1bn8 = nn.BatchNorm1d(384)
			self.t1fc9 = nn.Linear(384, 256)
			self.t1bn9 = nn.BatchNorm1d(256)
			self.t1fc10 = nn.Linear(256, 192)
			self.t1bn10 = nn.BatchNorm1d(192)
			self.t1fc11 = nn.Linear(192, 128)
			self.t1bn11 = nn.BatchNorm1d(128)
			self.t1fc12 = nn.Linear(128, 40)
			self.t1bn12 = nn.BatchNorm1d(40)
			self.t1fc13 = nn.Linear(40, 16)
			self.t1bn13  = nn.BatchNorm1d(16)
			self.t1fc14 = nn.Linear(16, 8)
			self.t1bn14 = nn.BatchNorm1d(8)
			self.t1fc15 = nn.Linear(8, 1)
			
			self.t2fc5 = nn.Linear(1024, 768)
			self.t2bn5 = nn.BatchNorm1d(768)
			self.t2fc6 = nn.Linear(768, 640)
			self.t2bn6 = nn.BatchNorm1d(640)
			self.t2fc7 = nn.Linear(640, 512)
			self.t2bn7 = nn.BatchNorm1d(512)
			self.t2fc8 = nn.Linear(512, 384)
			self.t2bn8 = nn.BatchNorm1d(384)
			self.t2fc9 = nn.Linear(384, 256)
			self.t2bn9 = nn.BatchNorm1d(256)
			self.t2fc10 = nn.Linear(256, 192)
			self.t2bn10 = nn.BatchNorm1d(192)
			self.t2fc11 = nn.Linear(192, 128)
			self.t2bn11 = nn.BatchNorm1d(128)
			self.t2fc12 = nn.Linear(128, 40)
			self.t2bn12 = nn.BatchNorm1d(40)
			self.t2fc13 = nn.Linear(40, 16)
			self.t2bn13  = nn.BatchNorm1d(16)
			self.t2fc14 = nn.Linear(16, 8)
			self.t2bn14 = nn.BatchNorm1d(8)
			self.t2fc15 = nn.Linear(8, 1)
			
			self.m0sfc5 = nn.Linear(1024, 768)
			self.m0sbn5 = nn.BatchNorm1d(768)
			self.m0sfc6 = nn.Linear(768, 640)
			self.m0sbn6 = nn.BatchNorm1d(640)
			self.m0sfc7 = nn.Linear(640, 512)
			self.m0sbn7 = nn.BatchNorm1d(512)
			self.m0sfc8 = nn.Linear(512, 384)
			self.m0sbn8 = nn.BatchNorm1d(384)
			self.m0sfc9 = nn.Linear(384, 256)
			self.m0sbn9 = nn.BatchNorm1d(256)
			self.m0sfc10 = nn.Linear(256, 192)
			self.m0sbn10 = nn.BatchNorm1d(192)
			self.m0sfc11 = nn.Linear(192, 128)
			self.m0sbn11 = nn.BatchNorm1d(128)
			self.m0sfc12 = nn.Linear(128, 40)
			self.m0sbn12 = nn.BatchNorm1d(40)
			self.m0sfc13 = nn.Linear(40, 16)
			self.m0sbn13  = nn.BatchNorm1d(16)
			self.m0sfc14 = nn.Linear(16, 8)
			self.m0sbn14 = nn.BatchNorm1d(8)
			self.m0sfc15 = nn.Linear(8, 1)
		  
	def forward(self, proj):
    
		if self.projection.initialization != 'Fixlayer':
			proj = self.fc1(proj)
		t1s128 = self.t1fc20(proj)
		t1s256= self.t1fc2(F.relu(self.t1bn20(t1s128)))
		t1s512 = self.t1fc3(F.relu(self.t1bn2(t1s256)))
		t1sc= F.relu(self.t1bn4(self.t1fc4(F.relu(self.t1bn3(t1s512)))))
		t1s= F.relu(self.t1bn5(self.t1fc5(t1sc)))
		t1s= F.relu(self.t1bn6(self.t1fc6(t1s)))
		t1s= self.t1fc7(t1s)
		t1s= F.relu(self.t1bn8(self.t1fc8(F.relu(self.t1bn7(t1s + t1s512)))))
		t1s= self.t1fc9(t1s)
		t1s= F.relu(self.t1bn10(self.t1fc10(F.relu(self.t1bn9(t1s+t1s256)))))
		t1s= self.t1fc11(t1s)
		t1s= self.t1fc12(F.relu(self.t1bn11(t1s+t1s128)))
		t1s= F.relu(self.t1bn13(self.t1fc13(F.relu(self.t1bn12(t1s+proj)))))
		t1s= F.relu(self.t1bn14(self.t1fc14(t1s)))
		t1s= self.t1fc15(t1s)
		
		t2s= F.relu(self.t2bn5(self.t2fc5(t1sc)))
		t2s= F.relu(self.t2bn6(self.t2fc6(t2s)))
		t2s= self.t2fc7(t2s)
		t2s= F.relu(self.t2bn8(self.t2fc8(F.relu(self.t2bn7(t2s + t1s512)))))
		t2s= self.t2fc9(t2s)
		t2s= F.relu(self.t2bn10(self.t2fc10(F.relu(self.t2bn9(t2s+t1s256)))))
		t2s= self.t2fc11(t2s)
		t2s= self.t2fc12(F.relu(self.t2bn11(t2s+t1s128)))
		t2s= F.relu(self.t2bn13(self.t2fc13(F.relu(self.t2bn12(t2s+proj)))))
		t2s= F.relu(self.t2bn14(self.t2fc14(t2s)))
		t2s= self.t2fc15(t2s)
		

		m0ss= F.relu(self.m0sbn5(self.m0sfc5(t1sc)))
		m0ss= F.relu(self.m0sbn6(self.m0sfc6(m0ss)))
		m0ss= self.m0sfc7(m0ss)
		m0ss= F.relu(self.m0sbn8(self.m0sfc8(F.relu(self.m0sbn7(m0ss + t1s512)))))
		m0ss= self.m0sfc9(m0ss)
		m0ss= F.relu(self.m0sbn10(self.m0sfc10(F.relu(self.m0sbn9(m0ss+t1s256)))))
		m0ss= self.m0sfc11(m0ss)
		m0ss= self.m0sfc12(F.relu(self.m0sbn11(m0ss+t1s128)))
		m0ss= F.relu(self.m0sbn13(self.m0sfc13(F.relu(self.m0sbn12(m0ss+proj)))))
		m0ss= F.relu(self.m0sbn14(self.m0sfc14(m0ss)))
		m0ss= self.m0sfc15(m0ss)
			
			
		result = torch.cat((m0ss,t1s,t2s),dim=1)
		return result